实验baseline：
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：原模型
    结果：
        mse: 0.0013741374878294753
        rho: 0.8996691485180837
        tau: 0.7429839180752802
        prec_at_10: 0.6942857142857142
        prec_at_20: 0.7492857142857143
实验1：2024-07-10_11-31-39
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：50轮只有第一轮使用了正则化
    结果：
        mse: 0.0013957483742932431
        rho: 0.9034613246827438
        tau: 0.7451035924208682
        prec_at_10: 0.6885714285714285
        prec_at_20: 0.7564285714285715
实验2：2024-07-10_14-29-49
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：50轮只有第一轮使用了正则化
    结果：
        mse: 0.001417391060522039
        rho: 0.9007067580650736
        tau: 0.7421839290277829
        prec_at_10: 0.6878571428571428
        prec_at_20: 0.7414285714285715
实验3：2024-07-10_16-55-47
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：50轮都不使用正则化
    结果：
        mse: 0.001451973561270433
        rho: 0.896414724614842
        tau: 0.7363007922310247
        prec_at_10: 0.6728571428571429
        prec_at_20: 0.7460714285714285
实验4：2024-07-11_15-03-52
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：50轮都使用正则化
    结果：
        mse: 0.001491616596164711
        rho: 0.8947561877247243
        tau: 0.732786590485926
        prec_at_10: 0.6571428571428571
        prec_at_20: 0.7328571428571428
实验5：2024-07-12_15-02-55
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：同上，50轮都使用正则化
    结果：
        mse: 0.0014096979958278938
        rho: 0.8999847011499349
        tau: 0.7415138184075062
        prec_at_10: 0.6878571428571427
        prec_at_20: 0.7528571428571429
实验6：2024-07-16_15-10-37
    数据集：训练集421*210、验证集420*140、测试集560*140
    说明：50轮都不使用正则化
    结果：
        mse: 0.0014641919780489703
        rho: 0.8954862022870623
        tau: 0.734295936621518
        prec_at_10: 0.6907142857142856
        prec_at_20: 0.7553571428571427
**实验7：2024-07-16_16-04-22
    数据集：训练集421*210、验证集420*140、测试集560*140、30轮
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：使用Cost*Alignment计算score, Cross模块得到Cost
    结果：跑一半断了
        验证集：Epoch = 28, MSE = 2.280(e-3), rho = 0.861, tau=0.695, prec_10 = 0.509, prec_20 = 0.595
        mse(10^-3): 2.23791
        rho: 0.84987
        tau: 0.67646
        p@10: 0.54786
        p@20: 0.61
实验8：2024-07-17_17-11-24
    数据集：训练集421*210、验证集420*140、测试集560*140、30轮
    说明：使用Cost*Alignment计算score，有参数的欧氏距离得到Cost。同时计算了增删点的代价
        (v1-v2)^2               [n,n,d]
        /d                      [n,n,d]
        Linear(d, d/2)          [n,n,d/2]
        Relu()                  [n,n,d/2]
        Linear(d/2, d/2)        [n,n,d/2]
        Tanh()                  [n,n,d/2]
        sum()                   [n,n]
        sigmoid()               [n,n]
        pad                     [10,10]
    结果：
        mse: 0.0023105955806332653
        rho: 0.8517773656868831
        tau: 0.6783637873754154
        prec_at_10: 0.495
        prec_at_20: 0.5935714285714285
实验9：2024-07-18_15-10-13
    数据集：训练集421*210、验证集420*140、测试集560*140、30轮
    参数：costMatrix(k=8)、LRL(hiddim=32)
    说明：使用Cost*Alignment计算score, Cross模块(参数k=8)得到Cost
    结果：
        mse(10^-3): 2.303
        rho: 0.845
        tau: 0.672
        p@10: 0.524
        p@20: 0.612
实验10：2024-07-18_17-12-12
    数据集：训练集421*210、验证集420*140、测试集560*140、30轮
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：节点嵌入通过LRL处理节点嵌入, 通过Cross生成Cost矩阵, 用Cost矩阵通过gs得到Alignment矩阵   
    结果：第一轮的效果很差
        Val Epoch=1, loss=834901.788, MSE=357119.261(e-3), rho=0.112, tau=0.074, prec_10=0.019, prec_20=0.027
实验11：2024-07-19_11-07-53
    数据集：训练集421*210、验证集420*140、测试集560*140、25轮
    参数：costMatrix(k=16)
    说明：节点嵌入通过Cross生成Cost矩阵, 用Cost矩阵通过gs得到Alignment矩阵, 然后Cost矩阵反转相关性exp(-x^2)   
    结果：
        mse(10^-3): 2.494
        rho: 0.838
        tau: 0.663
        p@10: 0.458   基线0.548
        p@20: 0.567
实验12：2024-07-22_09-16-33
    数据集：训练集421*210、验证集420*140、测试集560*140、30轮
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：节点嵌入通过LRL处理节点嵌入, 通过Cross生成Cost矩阵, 用Cost矩阵通过gs得到Alignment矩阵, 然后Cost矩阵反转相关性exp(-x^2)   
    结果：
        mse(10^-3): 2.457
        rho: 0.843
        tau: 0.668
        p@10: 0.472
        p@20: 0.592
实验13：2024-07-23_09-30-48
    数据集：训练集421*210、验证集420*140、测试集560*140、30轮
    说明：只用NTN得到score   
    结果：
        mse(10^-3): 2.351
        rho: 0.846
        tau: 0.672
        p@10: 0.491
        p@20: 0.601
实验14：2024-07-23_10-11-15
    数据集：训练集421*210、验证集420*140、测试集560*140、25轮
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：在实验11的基础上，多层拼接的节点嵌入(64+64+32+16)
    结果：
        mse(10^-3): 2.278
        rho: 0.854
        tau: 0.681
        p@10: 0.501
        p@20: 0.615
实验15：2024-07-24_12-57-24
    数据集：训练集421*210、验证集420*140、测试集560*140、25轮
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：在实验7的基础上，修改comb_score: alpha*sigmoid(score) + beta*sigmoid(sim_score)  
                                    ->   sigmoid(score + sim_score)
    结果：
        mse(10^-3): 2.408
        rho: 0.839
        tau: 0.664
        p@10: 0.505
        p@20: 0.589
实验16：
    数据集：训练集420*420、验证集420*140、测试集560*140、25轮
    参数：costMatrix(k=16)、LRL(hiddim=32)
    说明：
    结果：

实验x：
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：
    结果：
实验x：
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：
    结果：
实验x：
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：
    结果：
实验x：
    数据集：训练集420*420、验证集420*140、测试集560*140
    说明：
    结果：


                                100*140     420*140
GEDGNN                          0.71        0.58
GEDGNN_no_BCE                   0.68        0.55（估计）
GEDGNN_my_LRL_cross             0.67~0.68   0.55（估计）
GEDGNN_my_cost->align(LRL)      0.679       x
ERIC                            x           0.694
ERIC_no_reg                     x           0.67~0.69
ERIC_my_LRL_cross               x           0.548(k=16)/0.524(k=8)
ERIC_my_LRL_Eu                  x           0.495
ERIC_my_cost->align(exp(-x^2))  x           0.458
----------------------------------------------------------------
ERIC      使用多层拼接的节点嵌入    没使用     baseline
p@10        0.501                 0.472       0.548
GEDGNN    使用多层拼接的节点嵌入    没使用     baseline
p@10        0.717                 0.683       0.685

要做的实验：
2、在1的基础上 score = graph_score + cost*alignment + NTN

发现：
1、使用Cost*Alignment大概只需跑25轮、使用ERIC的方法要跑40-50轮
2、用预训练的模型测试每次输出结果不同（可能是gumbel—sinkhorn的影响，因为有随机数）




